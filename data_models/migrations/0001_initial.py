# Generated by Django 4.2 on 2023-06-12 03:40

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="City",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=20, verbose_name="市区町村名")),
                ("city_code", models.CharField(max_length=5, verbose_name="市区町村コード")),
            ],
        ),
        migrations.CreateModel(
            name="Prefectures",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=4, verbose_name="都道府県名")),
                ("pref_code", models.CharField(max_length=2, verbose_name="都道府県コード")),
            ],
        ),
        migrations.CreateModel(
            name="PrefecturesCity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "city",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="data_models.city",
                        verbose_name="市区町村ID",
                    ),
                ),
                (
                    "prefectures",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="data_models.prefectures",
                        verbose_name="都道府県ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RealEstateBookType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("type", models.CharField(max_length=2, verbose_name="不動産受付帳タイプID")),
            ],
        ),
        migrations.CreateModel(
            name="RealEstateType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("type", models.CharField(max_length=20, verbose_name="不動産タイプID")),
            ],
        ),
        migrations.CreateModel(
            name="RealEstateReceptionBook",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "chiban",
                    models.CharField(blank=True, max_length=20, verbose_name="地番"),
                ),
                (
                    "kaoku_number",
                    models.CharField(blank=True, max_length=20, verbose_name="家屋番号"),
                ),
                (
                    "reception_reason",
                    models.CharField(blank=True, max_length=5000, verbose_name="登記原因"),
                ),
                ("is_new", models.BooleanField(null=True, verbose_name="登録種別")),
                (
                    "address",
                    models.CharField(blank=True, max_length=100, verbose_name="住所"),
                ),
                ("outside", models.IntegerField(null=True, verbose_name="外")),
                (
                    "legal_affairs_bureau_request_date",
                    models.DateField(null=True, verbose_name="法務局受付日"),
                ),
                (
                    "legal_affairs_bureau_reception_number",
                    models.CharField(blank=True, max_length=20, verbose_name="法務局受付番号"),
                ),
                (
                    "postcode",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=7,
                        null=True,
                        verbose_name="郵便番号",
                    ),
                ),
                (
                    "prefectures_city",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="data_models.prefecturescity",
                        verbose_name="都道府県・市区町村ID",
                    ),
                ),
                (
                    "real_estate_book_type",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="data_models.realestatebooktype",
                        verbose_name="申請種別ID",
                    ),
                ),
                (
                    "real_estate_type",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="data_models.realestatetype",
                        verbose_name="不動産受付帳タイプID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150)),
                ("last_name", models.CharField(blank=True, max_length=150)),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. "
                        "A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
            },
        ),
    ]
