"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

from environ import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


def strtobool(val):
    """Convert a string representation of truth to true (1) or false (0).
    True values are 'y', 'yes', 't', 'true', 'on', and '1'; false values
    are 'n', 'no', 'f', 'false', 'off', and '0'.  Raises ValueError if
    'val' is anything else.
    distutils.util strtoboolからコピー。
    理由： distutilsは非推奨で、Python 3.12 での除去が予定されている。
    """
    val = val.lower()
    if val in ("y", "yes", "t", "true", "on", "1"):
        return 1
    elif val in ("n", "no", "f", "false", "off", "0"):
        return 0
    else:
        raise ValueError("invalid truth value %r" % (val,))


env = environ.Env(
    DB_HOST=(str, "localhost"),
    DB_PORT=(str, "5432"),
    ALLOWED_HOST=(str, "localhost"),
    SECRET_KEY=(str, "django-insecure-secret-key"),
    CORS_ALLOWED_ORIGINS=(str, "http://localhost:3000"),
    DB_NAME=(str, "product"),
    DB_USER=(str, "localhost"),
    DB_PASSWORD=(str, "localhost"),
    DEBUG=(str, "True"),  # AppRunnerで設定する際にstrとなるので合わせてstrにする
)
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

AUTH_USER_MODEL = "data_models.User"

DJOSER = {
    "LOGIN_FIELD": "email",
    # /users/set_password/ エンドポイント利用時の処理を変更する
    "SERIALIZERS": {
        "set_password": "lakers_backend.user_data_process.serializers.ValidatePasswordSerializer"
    },
}

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": env("DB_NAME"),
        "USER": env("DB_USER"),
        "PASSWORD": env("DB_PASSWORD"),
        "HOST": env("DB_HOST"),
        "PORT": env("DB_PORT"),
    }
}


# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "djoser",
    "data_models",
    "lakers_backend",
    "lakers_backend.domains",
    "lakers_backend.real_estate_book",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # CORSの設定 一番上で読み込まないとダメ
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "lakers_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        # パスワードの長さをが最小以下でないか(デフォルトは8)
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        # パスワードが完全に数字でないか
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/
LANGUAGE_CODE = "ja"
TIME_ZONE = "Asia/Tokyo"
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
STATIC_URL = "static/"

# host許可設定
ALLOWED_HOSTS = [env("ALLOWED_HOST")]

# CORS許可設定
CORS_ALLOWED_ORIGINS = [env("CORS_ALLOWED_ORIGINS")]

# JWT設定
SIMPLE_JWT = {
    # トークンをJWTに設定
    "AUTH_HEADER_TYPES": ("JWT"),
    # トークンの持続時間の設定
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=14),
    "ROTATE_REFRESH_TOKENS": True,
    "SIGNING_KEY": env("SECRET_KEY"),
    "BLACKLIST_AFTER_ROTATION": False,
    # 最終ログイン時間を記録（アクセス数が増えてきたらFalseに変更）
    "UPDATE_LAST_LOGIN": True,
    # ログイン時にカスタムしたシリアライザーを使用
    "TOKEN_OBTAIN_SERIALIZER": "lakers_backend.user_data_process.serializers.CustomTokenObtainPairSerializer",
}

# DRF設定
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
}

# デバッグモード
DEBUG = bool(strtobool(env("DEBUG"))) if type(env("DEBUG")) is str else env("DEBUG")

# シークレットキー
SECRET_KEY = env("SECRET_KEY")

# 末尾スラッシュがない場合にスラッシュを付与しないようにする
APPEND_SLASH = False

# ログ設定
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "name": "verbose",
            "format": "%(asctime)s %(name)s:%(lineno)s %(funcName)s [%(levelname)s]: %(message)s",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "stream": "ext://sys.stdout",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
    },
}
